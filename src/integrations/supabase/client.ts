
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://apltkougkglbsfphbghi.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFwbHRrb3Vna2dsYnNmcGhiZ2hpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM1OTE3MDMsImV4cCI6MjA1OTE2NzcwM30.Kk38S9Hl9tIwv_a3VPgUaq1cSCCPmlGJOR5R98tREeU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  global: {
    headers: {
      'x-application-name': 'cuephoria'
    }
  }
});

// Helper function to log and format errors from Supabase
export const handleSupabaseError = (error: any, operation: string): string => {
  console.error(`Supabase ${operation} error:`, error);
  
  // Format the error message
  if (error.code === '23505') {
    return 'This item already exists. Please try another one.';
  } else if (error.code === '23503') {
    return 'This operation references an item that doesn\'t exist.';
  } else if (error.code === '42P01') {
    return 'Database table not found. Please contact support.';
  } else if (error.message) {
    return error.message;
  } else {
    return `Error during ${operation}. Please try again.`;
  }
};

// Helper functions for data conversion
export const convertFromSupabaseProduct = (item: any): any => {
  const product = {
    id: item.id,
    name: item.name,
    price: item.price,
    category: item.category,
    stock: item.stock,
    image: item.image || undefined,
    originalPrice: item.original_price || undefined,
    offerPrice: item.offer_price || undefined,
    studentPrice: item.student_price || undefined,
    duration: item.duration || undefined,
    membershipHours: item.membership_hours || undefined
  };
  
  console.log('Converted product from DB:', product);
  return product;
};

export const convertToSupabaseProduct = (product: any): any => {
  const supabaseProduct = {
    id: product.id,
    name: product.name,
    price: product.price,
    category: product.category,
    stock: product.stock,
    image: product.image,
    original_price: product.originalPrice,
    offer_price: product.offerPrice,
    student_price: product.studentPrice,
    duration: product.duration,
    membership_hours: product.membershipHours
  };
  
  console.log('Converting product to Supabase format:', supabaseProduct);
  return supabaseProduct;
};

// Helper functions for customer user conversion
export const convertFromSupabaseCustomerUser = (item: any): any => {
  if (!item) return null;
  
  return {
    id: item.id,
    authId: item.auth_id,
    customerId: item.customer_id,
    email: item.email,
    referralCode: item.referral_code,
    resetPin: item.reset_pin,
    resetPinExpiry: item.reset_pin_expiry ? new Date(item.reset_pin_expiry) : null,
    pin: item.pin,
    createdAt: item.created_at ? new Date(item.created_at) : new Date()
  };
};

export const convertToSupabaseCustomerUser = (user: any): any => {
  return {
    id: user.id,
    auth_id: user.authId,
    customer_id: user.customerId,
    email: user.email,
    referral_code: user.referralCode,
    reset_pin: user.resetPin,
    reset_pin_expiry: user.resetPinExpiry ? user.resetPinExpiry.toISOString() : null,
    pin: user.pin,
    created_at: user.createdAt ? user.createdAt.toISOString() : new Date().toISOString()
  };
};

// Helper functions for reward conversion
export const convertFromSupabaseReward = (item: any): any => {
  if (!item) return null;
  
  return {
    id: item.id,
    name: item.name,
    description: item.description,
    pointsCost: item.points_cost,
    isActive: item.is_active,
    imageUrl: item.image_url,
    createdAt: item.created_at ? new Date(item.created_at) : new Date(),
    updatedAt: item.updated_at ? new Date(item.updated_at) : new Date()
  };
};

export const convertToSupabaseReward = (reward: any): any => {
  return {
    id: reward.id,
    name: reward.name,
    description: reward.description,
    points_cost: reward.pointsCost,
    is_active: reward.isActive,
    image_url: reward.imageUrl,
    created_at: reward.createdAt ? reward.createdAt.toISOString() : new Date().toISOString(),
    updated_at: reward.updatedAt ? reward.updatedAt.toISOString() : new Date().toISOString()
  };
};

// Helper functions for promotion conversion
export const convertFromSupabasePromotion = (item: any): any => {
  if (!item) return null;
  
  return {
    id: item.id,
    name: item.name,
    description: item.description,
    startDate: item.start_date ? new Date(item.start_date) : null,
    endDate: item.end_date ? new Date(item.end_date) : null,
    discountType: item.discount_type,
    discountValue: item.discount_value,
    isActive: item.is_active,
    imageUrl: item.image_url,
    createdAt: item.created_at ? new Date(item.created_at) : new Date()
  };
};

export const convertToSupabasePromotion = (promotion: any): any => {
  return {
    id: promotion.id,
    name: promotion.name,
    description: promotion.description,
    start_date: promotion.startDate ? promotion.startDate.toISOString() : null,
    end_date: promotion.endDate ? promotion.endDate.toISOString() : null,
    discount_type: promotion.discountType,
    discount_value: promotion.discountValue,
    is_active: promotion.isActive,
    image_url: promotion.imageUrl,
    created_at: promotion.createdAt ? promotion.createdAt.toISOString() : new Date().toISOString()
  };
};

// Helper functions for loyalty transaction conversion
export const convertFromSupabaseLoyaltyTransaction = (item: any): any => {
  if (!item) return null;
  
  return {
    id: item.id,
    customerId: item.customer_id,
    points: item.points,
    source: item.source,
    description: item.description,
    createdAt: item.created_at ? new Date(item.created_at) : new Date()
  };
};

// Helper functions for reward redemption conversion
export const convertFromSupabaseRewardRedemption = (item: any): any => {
  if (!item) return null;
  
  return {
    id: item.id,
    customerId: item.customer_id,
    rewardId: item.reward_id,
    pointsSpent: item.points_spent,
    redemptionDate: item.redeemed_at ? new Date(item.redeemed_at) : new Date(item.created_at),
    status: item.status,
    redemptionCode: item.redemption_code
  };
};

export const convertToSupabaseRewardRedemption = (redemption: any): any => {
  return {
    id: redemption.id,
    customer_id: redemption.customerId,
    reward_id: redemption.rewardId,
    points_spent: redemption.pointsSpent,
    redeemed_at: redemption.redemptionDate ? redemption.redemptionDate.toISOString() : new Date().toISOString(),
    status: redemption.status,
    redemption_code: redemption.redemptionCode,
    created_at: new Date().toISOString()
  };
};

// Convert currency to INR format
export const formatCurrency = (amount: number): string => {
  return new Intl.NumberFormat('en-IN', {
    style: 'currency',
    currency: 'INR',
    maximumFractionDigits: 0
  }).format(amount);
};
