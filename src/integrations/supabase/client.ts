
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { Product } from '@/types/pos.types';
import { PostgrestError } from '@supabase/supabase-js';

const SUPABASE_URL = "https://apltkougkglbsfphbghi.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFwbHRrb3Vna2dsYnNmcGhiZ2hpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM1OTE3MDMsImV4cCI6MjA1OTE2NzcwM30.Kk38S9Hl9tIwv_a3VPgUaq1cSCCPmlGJOR5R98tREeU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Handle Supabase errors and return user-friendly error messages
 */
export const handleSupabaseError = (error: PostgrestError, context: string): string => {
  console.error(`Supabase ${context} error:`, error);
  
  // Check for common error codes and provide user-friendly messages
  if (error.code === '23505') {
    return 'This record already exists. Please use a unique value.';
  }
  
  if (error.code === '23503') {
    return 'This operation failed because it references a record that does not exist.';
  }
  
  if (error.code === '42501') {
    return 'You do not have permission to perform this operation.';
  }
  
  if (error.code === '22P02') {
    return 'Invalid input format. Please check your data and try again.';
  }
  
  // Default message if we don't have a specific handler for this error
  return `An unexpected error occurred during ${context}. Please try again later.`;
};

/**
 * Convert a product from Supabase format to our application format
 */
export const convertFromSupabaseProduct = (item: any): Product => {
  return {
    id: item.id,
    name: item.name,
    price: item.price,
    category: item.category as 'food' | 'drinks' | 'tobacco' | 'challenges' | 'membership',
    stock: item.stock,
    image: item.image || undefined,
    originalPrice: item.original_price || undefined,
    offerPrice: item.offer_price || undefined,
    studentPrice: item.student_price || undefined,
    duration: item.duration as 'weekly' | 'monthly' | undefined,
    membershipHours: item.membership_hours || undefined
  };
};

/**
 * Convert a product from our application format to Supabase format
 */
export const convertToSupabaseProduct = (product: Product): any => {
  return {
    id: product.id,
    name: product.name,
    price: product.price,
    category: product.category,
    stock: product.stock,
    image: product.image || null,
    original_price: product.originalPrice || null,
    offer_price: product.offerPrice || null,
    student_price: product.studentPrice || null,
    duration: product.duration || null,
    membership_hours: product.membershipHours || null
  };
};
